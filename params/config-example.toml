# router swap identifier, must have prefix 'routerswap'
Identifier = "routerswap#20210326"
# router swap type (eg. erc20swap, nftswap, anycallswap)
SwapType = "erc20swap"
# default subtype is empty. anycall has subtype of 'curve'
SwapSubType = ""

# router sever config (server only)
[Server]
# administrators who can do admin work
Admins = [
	"0x3dfaef310a1044fd7d96750b42b44cf3775c00bf",
	"0x46cbe22b687d4b72c8913e4784dfe5b20fdc2b0e"
]
Assistants = [
	"0x6666666666666666666666666666666666666666"
]

# chain id black list of string array
ChainIDBlackList = []
# token id black list of string array
TokenIDBlackList = []
# account black list of string array
AccountBlackList = []
# enable replace swap job
EnableReplaceSwap = true
# enable pass big value swap job
EnablePassBigValueSwap = true
# replace plus gas price percentage
ReplacePlusGasPricePercent = 1
# wait time to replace swap
WaitTimeToReplace = 900
# maximum replace count
MaxReplaceCount = 20
# plus gas price percentage
PlusGasPricePercentage = 10
# maximum plus gas price percentage
MaxPlusGasPricePercentage = 100
# maximum gas price flunct percentage
MaxGasPriceFluctPercent = 10
# swap deadline offset for trading
SwapDeadlineOffset = 36000
# apecify auto swap nonce enabled chainids
AutoSwapNonceEnabledChains = ["25"]

# retry send tx loop count, key is chainID. (in main thread)
[Server.RetrySendTxLoopCount]
43114 = 2
25    = 10
# send tx loop count until success in child routines (after retry loop)
# key is chainID. use negative to disable loop
[Server.SendTxLoopCount]
43114 = 30
25    = -1
# send tx until success in child routines loop interval of seconds, key is chainID.
[Server.SendTxLoopInterval]
43114 = 10
25    = 10
# default gas limit. key is chainID. if not set, use 90000 as default.
[Server.DefaultGasLimit]
4     = 90000
46688 = 90000
# use fixed gas price (no adjust). key is chainID.
[Server.FixedGasPrice]
4     = "1000000001"
46688 = "1000000001"
# config maximum gas price. key is chainID.
[Server.MaxGasPrice]
4     = "3000000000"
46688 = "3000000000"
# swap nonce passed confirmed interval (seconds). key is chainID.
[Server.NoncePassedConfirmInterval]
4     = 600
46688 = 600
# dynamic fee tx config, the last part (3 here) is chainID
[Server.DynamicFeeTx.3]
PlusGasTipCapPercent = 10
PlusGasFeeCapPercent = 10
BlockCountFeeHistory = 3
MaxGasTipCap         = "5000000000"
MaxGasFeeCap         = "10000000000"
# how to calc gas price, eg. median (default), first, max, etc.
[Server.CalcGasPriceMethod]
43114 = "first"

# modgodb database connection config
[Server.MongoDB]
# DBURLs is prefered if exists. forbids set both DBURL and DBURLs.
#DBURL = "localhost:27017,localhost:12345"
#DBURLs = ["localhost:27017", "localhost:12345"]
DBName = "databasename"
UserName = "username"
Password = "password"

# bridge API service
[Server.APIServer]
# listen port
Port = 11556
# CORS config
AllowedOrigins = []
# Maximum number of requests to limit per second
MaxRequestsLimit = 10

# oracle config (oracle only)
[Oracle]
# report oracle status to this server
ServerAPIAddress = "http://127.0.0.1:11556/rpc"
# don't check server connection
NoCheckServerConnection = false

[Extra]
# is swap trade enabled
EnableSwapTrade = false
# is swap with permit enabled
EnableSwapWithPermit = false
# force call anySwapInAuto
ForceAnySwapInAuto = false
# for nft swap, add data in swapout log and swapin argument
IsNFTSwapWithData = false
# enalbe parallel swap
EnableParallelSwap = false
# use pending balace to prevent sending tx under not enough balance situation
UsePendingBalance = false
# dont panic in init router
DontPanicInInitRouter = false
# getting accept list interval (seconds) in accept job
GetAcceptListInterval = 5
# when meet invalid accept, ignore it instead of disagree it immediately
PendingInvalidAccept = false
# apecify dynamic fee tx enabled chainids
DynamicFeeTxEnabledChains = ["3"]
# enable check tx block hash for security reason
EnableCheckTxBlockHashChains = ["1285"]
# enable check tx block index for security reason
EnableCheckTxBlockIndexChains = ["1", "56"]
# chains don't use fromChainID from receipt log
DisableUseFromChainIDInReceiptChains = ["1666600000"]
DontCheckReceivedTokenIDs = ["USDC", "MIM"]
# allow call into router from contract's constructor
AllowCallByConstructor = false
# allow call into router from contract
AllowCallByContract = false
# whether check eip1167 master call by contract
CheckEIP1167Master = false
# min reserve fee. key is chainID. defaults to 1e17 wei
[Extra.MinReserveFee]
4     = 100000000000000000
46688 = 100000000000000000
# min reserve budget. key is chainID. defaults to 1e16 wei
[Extra.MinReserveBudget]
4     = 10000000000000000
46688 = 10000000000000000
# base fee percent, must be in range [-90, 500]. key is dest chainID
[Extra.BaseFeePercent]
4     = 100
46688 = 50
# RPC timeout, key is chainID, value is of seconds (deafults to 5)
[Extra.RPCClientTimeout]
1313161554 = 60
25 = 60
# customs, key is chainID. value is a mapping.
[Extra.Customs.1313161554]
sendtxTimeout = "60"
[Extra.Customs.30]
dontCheckAddressMixedCase = "true"
# big value whitelist, key is tokenID
[Extra.BigValueWhitelist]
USDC = ["0x1111111111111111111111111111111111111111"]
MIM  = ["0x2222222222222222222222222222222222222222"]
# call by contract whitelist, key is chainID
[Extra.CallByContractWhitelist]
4 = [
	"0x1111111111111111111111111111111111111111",
	"0x2222222222222222222222222222222222222222"
]
# call by contract whitelist of code hash, key is chainID
[Extra.CallByContractCodeHashWhitelist]
4 = [
	"0x1111111111111111111111111111111111111111111111111111111111111111"
]


# OnChain config
[OnChain]
# 0: disable, min:600, unit is seconds
ReloadCycle = 0
Contract = "0x77bc292e465cfff6dda1fd5ca67a2a1320d2657e"
APIAddress = ["http://127.0.0.1:8711", "http://127.0.0.1:8722"]
#WSServers = ["ws://127.0.0.1:7711"]


# Gateways config. key is chainID
[Gateways]
4     = ["http://127.0.0.1:6711", "http://127.0.0.1:6722"]
46688 = ["http://127.0.0.1:8711", "http://127.0.0.1:8722"]


# GatewaysExt config. key is chainID. used for broadcasting tx
[GatewaysExt]
4     = ["http://127.0.0.1:6000"]
46688 = ["http://127.0.0.1:8000"]


# MPC config
[MPC]
# mpc rpc api prefix
APIPrefix = "smpc_"
# RPC timeout
RPCTimeout = 10
# sign timeout of seconds
SignTimeout = 120
# max sign group consecutive failures
MaxSignGroupFailures = 5
# min interval to add back sign group (seconds)
MinIntervalToAddSignGroup = 3600
# verify signature in accept sign info
VerifySignatureInAccept = false

# mpc group ID
GroupID = "74245ef03937fa75b979bdaa6a5952a93f53e021e0832fca4c2ad8952572c9b70f49e291de7e024b0f7fc54ec5875210db2ac775dba44448b3972b75af074d17"

# mpc threshold (NeededOracles=2,TotalOracles=3 represent '2/3' threshold)
NeededOracles = 2
TotalOracles = 3

# mpc mode (0:managed 1:private)
Mode = 0

# initiators of mpc sign
Initiators = [
	"0x897a9980808a2cae0d09ff693f02a4f80abb2233"
]

# use private key instead (use for testing)
SignWithPrivateKey = false
# set signer's private key, key is chain ID (use for testing)
[MPC.SignerPrivateKeys]
4     = "0x1111111111111111111111111111111111111111111111111111111111111111"
46688 = "0x2222222222222222222222222222222222222222222222222222222222222222"

# MPC default node config
[MPC.DefaultNode]
# mpc sub groups for signing (server only)
SignGroups = [
	"38a93f457c793ac3ee242b2c050a403774738e6558cfaa620fe5577bb15a28f63c39adcc0778497e5009a9ee776a0778ffcad4e95827e69efa21b893b8a78793",
	"bb1dfe1ec046cc3a3b88408ae03976aabffe459b40e5def09e76f5d4c7a917133241da9da7fc05e3e172fab54ce3129a9a492d52a5a09494d0b9c1e608f661bf"
]

# mpc user keystore and password file (suggest using absolute path)
KeystoreFile = "/home/xxx/accounts/keystore1"
PasswordFile = "/home/xxx/accounts/password1"

# mpc backend node (gmpc node RPC address)
RPCAddress = "http://127.0.0.1:2921"
